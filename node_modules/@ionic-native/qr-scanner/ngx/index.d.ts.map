{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport interface QRScannerStatus {\n    /**\n     * On iOS and Android 6.0+, camera access is granted at runtime by the user (by clicking \"Allow\" at the dialog).\n     * The authorized property is a boolean value which is true only when the user has allowed camera access to your app (AVAuthorizationStatus.Authorized).\n     * On platforms with permissions granted at install (Android pre-6.0, Windows Phone) this property is always true.\n     */\n    authorized: boolean;\n    /**\n     * A boolean value which is true if the user permanently denied camera access to the app (AVAuthorizationStatus.Denied).\n     * Once denied, camera access can only be gained by requesting the user change their decision (consider offering a link to the setting via openSettings()).\n     */\n    denied: boolean;\n    /**\n     * A boolean value which is true if the user is unable to grant permissions due to parental controls, organization security configuration profiles, or similar reasons.\n     */\n    restricted: boolean;\n    /**\n     * A boolean value which is true if QRScanner is prepared to capture video and render it to the view.\n     */\n    prepared: boolean;\n    /**\n     * A boolean value which is true when the preview layer is visible (and on all platforms but browser, the native webview background is transparent).\n     */\n    showing: boolean;\n    /**\n     * A boolean value which is true if QRScanner is actively scanning for a QR code.\n     */\n    scanning: boolean;\n    /**\n     * A boolean value which is true if QRScanner is displaying a live preview from the device's camera. Set to false when the preview is paused.\n     */\n    previewing: boolean;\n    /**\n     * A boolean value which is true if the light is enabled.\n     */\n    lightEnabled: boolean;\n    /**\n     * A boolean value which is true only if the users' operating system is able to QRScanner.openSettings().\n     */\n    canOpenSettings: boolean;\n    /**\n     * A boolean value which is true only if the users' device can enable a light in the direction of the currentCamera.\n     */\n    canEnableLight: boolean;\n    /**\n     * A boolean value which is true only if the current device \"should\" have a front camera.\n     * The camera may still not be capturable, which would emit error code 3, 4, or 5 when the switch is attempted.\n     * (On the browser platform, this value is false until the prepare method is called.)\n     */\n    canChangeCamera: boolean;\n    /**\n     * A number representing the index of the currentCamera. 0 is the back camera, 1 is the front.\n     */\n    currentCamera: number;\n}\n/**\n * @name QR Scanner\n * @capacitorincompatible true\n * @description\n * A fast, energy efficient, highly-configurable QR code scanner for Cordova apps.\n *\n * Requires Cordova plugin: `cordova-plugin-qrscanner`. For more info, please see the [QR Scanner plugin docs](https://github.com/bitpay/cordova-plugin-qrscanner).\n *\n * @usage\n * ```typescript\n * import { QRScanner, QRScannerStatus } from '@ionic-native/qr-scanner/ngx';\n *\n *\n * constructor(private qrScanner: QRScanner) { }\n *\n * ...\n *\n * // Optionally request the permission early\n * this.qrScanner.prepare()\n *   .then((status: QRScannerStatus) => {\n *      if (status.authorized) {\n *        // camera permission was granted\n *\n *\n *        // start scanning\n *        let scanSub = this.qrScanner.scan().subscribe((text: string) => {\n *          console.log('Scanned something', text);\n *\n *          this.qrScanner.hide(); // hide camera preview\n *          scanSub.unsubscribe(); // stop scanning\n *        });\n *\n *      } else if (status.denied) {\n *        // camera permission was permanently denied\n *        // you must use QRScanner.openSettings() method to guide the user to the settings page\n *        // then they can grant the permission from there\n *      } else {\n *        // permission was denied, but not permanently. You can ask for permission again at a later time.\n *      }\n *   })\n *   .catch((e: any) => console.log('Error is', e));\n *\n *\n * ```\n * @interfaces\n * QRScannerStatus\n */\nexport declare class QRScanner extends IonicNativePlugin {\n    /**\n     * Request permission to use QR scanner.\n     * @return {Promise<QRScannerStatus>}\n     */\n    prepare(): Promise<QRScannerStatus>;\n    /**\n     * Call this method to enable scanning. You must then call the `show` method to make the camera preview visible.\n     * @return {Observable<string>} returns an Observable that emits the scanned text. Unsubscribe from the observable to stop scanning.\n     */\n    scan(): Observable<string>;\n    /**\n     * Configures the native webview to have a transparent background, then sets the background of the <body> and <html> DOM elements to transparent, allowing the webview to re-render with the transparent background.\n     * @returns {Promise<QRScannerStatus>}\n     */\n    show(): Promise<QRScannerStatus>;\n    /**\n     * Configures the native webview to be opaque with a white background, covering the video preview.\n     * @returns {Promise<QRScannerStatus>}\n     */\n    hide(): Promise<QRScannerStatus>;\n    /**\n     * Enable the device's light (for scanning in low-light environments).\n     * @returns {Promise<QRScannerStatus>}\n     */\n    enableLight(): Promise<QRScannerStatus>;\n    /**\n     * Destroy the scanner instance.\n     * @returns {Promise<QRScannerStatus>}\n     */\n    destroy(): Promise<QRScannerStatus>;\n    /**\n     * Disable the device's light.\n     * @return {Promise<QRScannerStatus>}\n     */\n    disableLight(): Promise<QRScannerStatus>;\n    /**\n     * Use front camera\n     * @return {Promise<QRScannerStatus>}\n     */\n    useFrontCamera(): Promise<QRScannerStatus>;\n    /**\n     * Use back camera\n     * @return {Promise<QRScannerStatus>}\n     */\n    useBackCamera(): Promise<QRScannerStatus>;\n    /**\n     * Set camera to be used.\n     * @param camera {number} Provide `0` for back camera, and `1` for front camera.\n     * @return {Promise<QRScannerStatus>}\n     */\n    useCamera(camera: number): Promise<QRScannerStatus>;\n    /**\n     * Pauses the video preview on the current frame and pauses scanning.\n     * @return {Promise<QRScannerStatus>}\n     */\n    pausePreview(): Promise<QRScannerStatus>;\n    /**\n     * Resumse the video preview and resumes scanning.\n     * @return {Promise<QRScannerStatus>}\n     */\n    resumePreview(): Promise<QRScannerStatus>;\n    /**\n     * Returns permission status\n     * @return {Promise<QRScannerStatus>}\n     */\n    getStatus(): Promise<QRScannerStatus>;\n    /**\n     * Opens settings to edit app permissions.\n     */\n    openSettings(): void;\n}\n"]}